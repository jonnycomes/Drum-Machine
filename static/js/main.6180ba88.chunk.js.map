{"version":3,"sources":["pages/display.js","modules/action.js","pages/drum-pad.js","modules/reducer.js","App.js","modules/store.js","serviceWorker.js","index.js"],"names":["Display","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","displayText","bind","assertThisInitialized","letter","react_default","a","createElement","id","Component","connect","state","Types","CHANGE_LETTER","modules_action","type","DrumPad","handleClick","handleKeyPress","event","changeLetter","target","name","playClip","key","toUpperCase","x","document","getElementById","currentTime","play","addEventListener","removeEventListener","href","className","data","padId","onClick","src","clipSource","dispatch","ACTIONS","defaultState","drumReducer","arguments","length","undefined","action","console","log","initialState","reduxStore","window","REDUX_INITIAL_DATA","createStore","applyMiddleware","logger","App","es","store","display","drum_pad","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6180ba88.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import ACTIONS from \"../modules/action\";\nimport { connect } from \"react-redux\";\n\nclass Display extends Component {\n  constructor(props){\n    super(props);\n    this.displayText = this.displayText.bind(this);\n  }\n  \n  displayText() {\n    switch(this.props.letter){\n    case 'Q':\n      return 'heater 1';\n    case 'W':\n      return 'heater-2';\n    case 'E':\n      return 'heater-3';\n    case 'A':\n      return 'side-stick';\n    case 'S':\n      return 'snare';\n    case 'D':\n      return 'open-hi-hat';\n    case 'Z':\n      return 'kick-n-hat';\n    case 'X':\n      return 'kick';\n    case 'C':\n      return 'punchy-kick';\n    default:\n      return '';\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"display\">\n        {this.displayText()}\n      </div>\n    );\n  }\n}\n\n\n\n\nconst mapStateToProps = state => ({\n  letter: state.letter\n});\nexport default connect(\n  mapStateToProps,\n  null\n)(Display);","// types of action\nconst Types = {\n  CHANGE_LETTER: \"CHANGE_LETTER\"\n  //Add more types here after comma\n};\n// actions\nconst changeLetter = letter => ({\n  type: Types.CHANGE_LETTER,\n  letter\n});\nexport default {\n  changeLetter,\n  Types\n};","import React, { Component } from \"react\";\nimport ACTIONS from \"../modules/action\";\nimport { connect } from \"react-redux\";\n\nclass DrumPad extends Component {\n  constructor(props){\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  handleClick(event) {\n    this.props.changeLetter(event.target.name);\n    this.playClip(event.target.name);\n  };\n\n  handleKeyPress(event) {\n    let letter = event.key.toUpperCase();\n    if(letter === 'Q' ||\n       letter === 'W' ||\n       letter === 'E' ||\n       letter === 'A' ||\n       letter === 'S' ||\n       letter === 'D' ||\n       letter === 'Z' ||\n       letter === 'X' ||\n       letter === 'C')   {\n      this.props.changeLetter(letter);\n      this.playClip(letter);\n    }\n  }\n\n  playClip(letter) {\n    let x = document.getElementById(letter);\n    x.currentTime = 0;\n    x.play();\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  render() {\n    return (\n        <a href=\"#drum-machine\" className=\"drum-pad\" id={this.props.data.padId} onClick={this.handleClick} name={this.props.data.letter}>{this.props.data.letter}\n          <audio src={this.props.data.clipSource} className=\"clip\" id={this.props.data.letter}>\n            Your browser does not support audio.\n          </audio>\n        </a>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => ({\n  letter: state.letter\n});\nconst mapDispatchToProps = dispatch => ({\n  changeLetter: letter => dispatch(ACTIONS.changeLetter(letter))\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DrumPad);","import ACTIONS from \"./action\";\nconst defaultState = {\n  letter: ''\n};\nconst drumReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case ACTIONS.Types.CHANGE_LETTER: {\n      console.log(action);\n      let newLetter = action.letter;\n      return { letter: newLetter };\n    }\n    default:\n      return state;\n  }\n};\nexport default drumReducer;","\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Display from \"./pages/display\";\nimport DrumPad from \"./pages/drum-pad\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport configureStore from \"./modules/store\";\nconst reduxStore = configureStore(window.REDUX_INITIAL_DATA);\nclass App extends Component {\n  render() {\n    return (\n      <ReduxProvider store={reduxStore}>\n        <div id='drum-machine'>\n          <Display />\n          <DrumPad data={{letter: 'Q', padId: 'heater-1', clipSource: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'}} />\n          <DrumPad data={{letter: 'W', padId: 'heater-2', clipSource: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'}} />\n          <DrumPad data={{letter: 'E', padId: 'heater-3', clipSource: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'}} />\n          <DrumPad data={{letter: 'A', padId: 'side-stick', clipSource: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'}} />\n          <DrumPad data={{letter: 'S', padId: 'snare', clipSource: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'}} />\n          <DrumPad data={{letter: 'D', padId: 'open-hi-hat', clipSource: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'}} />\n          <DrumPad data={{letter: 'Z', padId: 'kick-n-hat', clipSource: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'}} />\n          <DrumPad data={{letter: 'X', padId: 'kick', clipSource: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'}} />\n          <DrumPad data={{letter: 'C', padId: 'punchy-kick', clipSource: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'}} />\n        </div>\n      </ReduxProvider>\n    );\n  }\n}\nexport default App;\n","import { createStore, applyMiddleware } from \"redux\";\n// Logger with default options\nimport logger from \"redux-logger\";\nimport drumReducer from \"./reducer\";\nexport default function configureStore(initialState) {\n  const store = createStore(drumReducer, initialState, applyMiddleware(logger));\n  return store;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}